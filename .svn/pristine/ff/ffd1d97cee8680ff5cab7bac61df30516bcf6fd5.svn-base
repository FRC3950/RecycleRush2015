// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"

#include <LiveWindow/LiveWindow.h>

#include "ConfigKeys.h"
#include "Config/ConfigInstanceMgr.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Solenoid* RobotMap::gantrySubsystemRestraintControlSolenoid = NULL;
DigitalInput* RobotMap::doorControlSubsystemContanterLimitSwich = NULL;
Solenoid* RobotMap::gantrySubsystemLiftSolenoid = NULL;
Solenoid* RobotMap::gantrySubsystemLeftGripSolenoid = NULL;
Solenoid* RobotMap::gantrySubsystemRightGripSolenoid = NULL;
DigitalInput* RobotMap::gantrySubsystemCrateAlignedSwich = NULL;
CANTalon* RobotMap::driveSubsystemCANTalon1 = NULL;
CANTalon* RobotMap::driveSubsystemCANTalon3 = NULL;
CANTalon* RobotMap::driveSubsystemCANTalon2 = NULL;
CANTalon* RobotMap::driveSubsystemCANTalon4 = NULL;
RobotDrive* RobotMap::driveSubsystemRobotDrive = NULL;
Gyro* RobotMap::driveSubsystemGyro1 = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();


	// Hooked up.
	gantrySubsystemLiftSolenoid = new Solenoid(0, 3);
	lw->AddActuator("GantrySubsystem", "LiftSolenoid", gantrySubsystemLiftSolenoid);
#if 1
	gantrySubsystemRestraintControlSolenoid = new Solenoid(0, 0);
	lw->AddActuator("GantrySubsystem", "RestraintControlSolenoid", gantrySubsystemRestraintControlSolenoid);
	
	// Not hooked up yet.
	gantrySubsystemLeftGripSolenoid = new Solenoid(0, 1);
	lw->AddActuator("GantrySubsystem", "LeftGripSolenoid", gantrySubsystemLeftGripSolenoid);
	
	// Not hooked up.
	gantrySubsystemRightGripSolenoid = new Solenoid(0, 2);
	lw->AddActuator("GantrySubsystem", "RightGripSolenoid", gantrySubsystemRightGripSolenoid);
	
	// Present and hooked up.
	gantrySubsystemCrateAlignedSwich = new DigitalInput(0);
	lw->AddSensor("GantrySubsystem", "CrateAlignedSwich", gantrySubsystemCrateAlignedSwich);
#endif
	
	driveSubsystemCANTalon1 = new CANTalon(1);
	
	
	driveSubsystemCANTalon3 = new CANTalon(3);
	
	
	driveSubsystemCANTalon2 = new CANTalon(2);
	
	
	driveSubsystemCANTalon4 = new CANTalon(4);
	
	
	driveSubsystemRobotDrive = new RobotDrive(driveSubsystemCANTalon1,
											  driveSubsystemCANTalon2,
											  driveSubsystemCANTalon3,
											  driveSubsystemCANTalon4);
	
//	driveSubsystemRobotDrive->SetSafetyEnabled(true);
//    driveSubsystemRobotDrive->SetExpiration(0.1);
    driveSubsystemRobotDrive->SetSensitivity(0.5);
    driveSubsystemRobotDrive->SetMaxOutput(1.0);
    driveSubsystemRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor,true);
    driveSubsystemRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor,true);

    ConfigMgr *configMgr = ConfigInstanceMgr::getInstance();

    if (configMgr->getBoolVal(ConfigKeys::Drive_CreateGyroKey, RobotMapConfigValueDefaults::Drive_CreateGyroDefaultValue))
    {
		driveSubsystemGyro1 = new Gyro(0);
		lw->AddSensor("DriveSubsystem", "Gyro 1", driveSubsystemGyro1);
		driveSubsystemGyro1->SetSensitivity(0.007);
    }

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
