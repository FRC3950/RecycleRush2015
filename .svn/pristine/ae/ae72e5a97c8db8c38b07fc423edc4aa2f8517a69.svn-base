// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CheckContainerAlignmentCommand.h"
#include <LiveWindow/LiveWindow.h>
#include <SmartDashboard/SmartDashboard.h>
#include "../ConfigKeys.h"
#include "../Config/ConfigInstanceMgr.h"
#include "../Logging.h"
#include "../SmartDashboardFields.h"

namespace
{
	double OutputCheckContainerAlignmentInSecsDefaultValue = 1.0;
}

CheckContainerAlignmentCommand::CheckContainerAlignmentCommand()
	: 	outputCheckContainerAlignmentIntervalInSecs(OutputCheckContainerAlignmentInSecsDefaultValue),
		lastOutputCheckContainerAlignment(-1.0)
{
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	Requires(Robot::gantrySubsystem);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void CheckContainerAlignmentCommand::Initialize() {
	Logger::GetInstance()->Log(DriveSubsystemLogId, Logger::kINFO, "DriveCommand Initialized()");

	outputCheckContainerAlignmentIntervalInSecs = ConfigInstanceMgr::getInstance()->getDoubleVal(ConfigKeys::Gantry_OutputCheckContainerAlignmentInSecsConfigKey,
																								 lastOutputCheckContainerAlignment);
}

// Called repeatedly when this Command is scheduled to run
void CheckContainerAlignmentCommand::Execute() {

	if (SmartDashboardNeedsUpdating())
	{
		bool limitSwitchSet = Robot::gantrySubsystem->CheckContainerAlignedLimitSwitch();


		SmartDashboard::PutBoolean(ContainerAlignedField, limitSwitchSet);

		Logger::GetInstance()->Log(GantrySubsystemLogId, Logger::kINFO, "Container Aligned Limit Switch Set is %s",
								   limitSwitchSet ? "TRUE" : "FALSE");
	}
}

// Make this return true when this Command no longer needs to run execute()
bool CheckContainerAlignmentCommand::IsFinished() {
	Logger::GetInstance()->Log(GantrySubsystemLogId, Logger::kINFO, "CheckContainerAlignmentCommand IsFinished() called.");
	return false;
}

// Called once after isFinished returns true
void CheckContainerAlignmentCommand::End() {
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void CheckContainerAlignmentCommand::Interrupted() {

}

bool CheckContainerAlignmentCommand::SmartDashboardNeedsUpdating()
{
	if (lastOutputCheckContainerAlignment <= 0.0)
	{
		lastOutputCheckContainerAlignment = Timer::GetFPGATimestamp();
		return true;
	}

	double currTime = Timer::GetFPGATimestamp();

	if ((currTime - lastOutputCheckContainerAlignment) >= outputCheckContainerAlignmentIntervalInSecs)
	{
		lastOutputCheckContainerAlignment = currTime;
		return true;
	}

	return false;
}
