// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVESUBSYSTEM_H
#define DRIVESUBSYSTEM_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */

// Default values for the various configuration
// items that the drive subsystem uses.
namespace DriveSubsystemConfigValueDefaults
{
	const bool Drive_UseGyroDefaultValue = false;
}

enum DriveHeading {
	DriveForward,
	DriveBack,
	DriveLeft,
	DriveRight
};

enum RotateDirection {
	RotateLeft,
	RotateRight
};

enum AutoMode {
	Off,
	Driving,
	Rotating
};

class DriveSubsystem: public Subsystem {
	// It's desirable that everything possible under private except
	// for methods that implement subsystem capabilities
public:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	CANTalon* cANTalon1;
	CANTalon* cANTalon3;
	CANTalon* cANTalon2;
	CANTalon* cANTalon4;
	RobotDrive* robotDrive;
	Gyro* gyro1;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	DriveSubsystem();
	void InitDefaultCommand();
	void MecanumDrive(float x, float y, float twist);
	void EnableDriveSubsystem();

	bool AutoDriveSetup(DriveHeading heading, float distance);
	void AutoDriveExecute();
	bool AutoDriveHasReachedLocation();

	bool AutoRotateSetup(float angle, RotateDirection direction);
	void AutoRotateExecute();
	bool AutoHasFinishedRotating();

	AutoMode AutoModeState() const;
	void AutoModeDisable();

private:
	void SetSafetyMode(CANTalon* motor, bool enabled, float timeout = 0.0);

	DriveHeading autoHeading;

	float autoDriveDistenceInInches;

	AutoMode autoMode;

	bool autoActionInProgress;

	bool useGyro;

	float autoRotateInputAngle;

	float autoGyroTargetAngle;

	RotateDirection autoRotateDirection;
};

#endif
